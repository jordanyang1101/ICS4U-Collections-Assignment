import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import java.util.Set;


public class CollectionsDemonstrator {
    public static void main(String[] args){
        ArrayListDemo();
        LinkedListsDemo();
        SetsDemo();
        QueuesDemo();
        MapsDemo();
    }

    public static void ArrayListDemo(){
        System.out.println();
        System.out.println("ArrayListDemo");

        ArrayList<String> arrayList = new ArrayList<>();

        arrayList.add("Jordan");
        arrayList.add("Vinit");
        arrayList.add("Harry");
        arrayList.add("Mrs. Luce");
        System.out.println("Printing List");
        System.out.println(arrayList);

        System.out.println("ArrayList contains Jordan: " + arrayList.contains("Jordan"));
        System.out.println("Names in arrayList: " + arrayList.size());
        System.out.println("First name is " + arrayList.getFirst());
        System.out.println("Second name is " + arrayList.get(1));
        System.out.println("Second last name is " + arrayList.get(arrayList.size()-2));
        arrayList.removeLast();
        System.out.println("ArrayList with last name removed: " + arrayList);
    }

    public static void LinkedListsDemo(){
        System.out.println();
        System.out.println("LinkedSetsDemo");
        LinkedList<Double> linkedList = new LinkedList<>();

        linkedList.add(4.56);
        linkedList.addFirst(1.23);
        linkedList.add(7.89);

        System.out.println(linkedList);

        System.out.println("Printing formatted List");
        for(double num : linkedList) {
            System.out.print(num + " ");
        }
        System.out.println();

        System.out.println("LinkedList is empty: " + linkedList.isEmpty());
        linkedList.removeFirst();
        System.out.println("LinkedList after removing the first element: " + linkedList);
    }

    public static void SetsDemo(){
        System.out.println();
        System.out.println("SetsDemo");
        Set<Integer> set = new HashSet<>();

        set.add(1);
        set.add(2);
        set.add(3);

        System.out.println("First set: " + set);
        System.out.println("Set contains 4: " + set.contains(4));
        set.add(1);
        System.out.println("Set with duplicate added: " + set);

        Set<Integer> set2 = new HashSet<>();
        set2.add(3);
        set2.add(4);
        set2.add(5);

        System.out.println("Second set: " + set2);

        Set<Integer> set3 = new HashSet<>(set);
        set3.retainAll(set2);
        System.out.println("Common elements: " + set3);
        System.out.println("Size of second set: " + set2.size());

        set.clear();
        System.out.println("Set when cleared: " + set);
    }

    public static void QueuesDemo(){
        System.out.println();
        System.out.println("QueueDemo");

        Queue<String> queue = new PriorityQueue<>();
        queue.offer("Analyze requirements");
        queue.offer("Design");
        queue.offer("Implement");
        queue.offer("Testing");
        queue.offer("Maintenance");

        System.out.println(queue);

        System.out.println("Is the queue empty: " + queue.isEmpty());
        System.out.println("Size of queue: " + queue.size());
        System.out.println("Head of queue: " + queue.poll());
        System.out.println("Peek of queue: " + queue.peek());
    }

    public static void MapsDemo(){
        System.out.println();
        System.out.println("MapsDemo");

        Map<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        map.put("Three", 3);

        System.out.println(map);

        System.out.println("Value of key 'One': " + map.get("One"));
        System.out.println("Map contains key 'Two': " + map.containsKey("Two"));
        map.remove("Three");
        System.out.println("Map with key 'Three' removed: " + map);
        Set<String> keySet = map.keySet();
        System.out.println("Keys in map: " + keySet);
    }
}
